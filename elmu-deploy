#!/usr/bin/env node

const minimist = require('minimist');
const { promisify } = require('util');
const { ECS, Credentials } = require('aws-sdk');

const requiredParams = ['access-key', 'secret-key', 'region', 'cluster', 'service', 'container', 'image', 'image-tag'];
const optionalParams = ['wait'];

(async () => {

  try {

    const config = minimist(process.argv.slice(2));
    const missingParams = requiredParams.filter(rp => !Object.keys(config).includes(rp));
    if (missingParams.length) {
      throw new Error(`Missing params: ${missingParams.join(', ')}`);
    }

    const ecs = new ECS({
      region: config.region,
      apiVersion: '2014-11-13',
      credentials: new Credentials(config.accessKey, config.secretKey)
    });

    const ecsDescribeServices = promisify(ecs.describeServices.bind(ecs));
    const ecsDescribeTaskDefinition = promisify(ecs.describeTaskDefinition.bind(ecs));
    const ecsRegisterTaskDefinition = promisify(ecs.registerTaskDefinition.bind(ecs));
    const ecsUpdateService = promisify(ecs.updateService.bind(ecs));
    const ecsWaitFor = promisify(ecs.waitFor.bind(ecs));

    const serviceDescriptions = await ecsDescribeServices({
      cluster: config.cluster,
      services: [config.service]
    });

    const taskDefinitionDescription = await ecsDescribeTaskDefinition({
      taskDefinition: serviceDescriptions.services[0].taskDefinition
    });

    const task = taskDefinitionDescription.taskDefinition;
    console.log(`Current task definition: ${task.taskDefinitionArn}`);

    const newTaskDefinition = {
      family: task.family,
      taskRoleArn: task.taskRoleArn,
      executionRoleArn: task.executionRoleArn,
      networkMode: task.networkMode,
      volumes: task.volumes,
      placementConstraints: task.placementConstraints,
      requiresCompatibilities: task.requiresCompatibilities,
      cpu: task.cpu,
      memory: task.memory,
      containerDefinitions: task.containerDefinitions.map(cd => {
        return (cd.name === config.container) ? { ...cd, image: `${config.image}:${config.imageTag}` } : cd;
      })
    };

    const newTaskDefinitionDescription = await ecsRegisterTaskDefinition(newTaskDefinition);

    const registeredTask = newTaskDefinitionDescription.taskDefinition;
    console.log(`New task definition: ${registeredTask.taskDefinitionArn}`);

    await ecsUpdateService({
      cluster: config.cluster,
      service: config.service,
      taskDefinition: registeredTask.taskDefinitionArn
    });

    if (config.wait) {
      console.log('Waiting for service stability...');
      await ecsWaitFor('servicesStable', {
        cluster: config.cluster,
        services: [config.service],
      });
    }

    console.log('DONE!');

  } catch (error) {
    console.error(error);
    process.exit(1);
  }

})();
